// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 5;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventOnGoalScored.ID: result = typeof(EventOnGoalScored); return;
          case EventOnPlayerJoined.ID: result = typeof(EventOnPlayerJoined); return;
          case EventOnPlayerLeft.ID: result = typeof(EventOnPlayerLeft); return;
          case EventOnPlayerChangeTeam.ID: result = typeof(EventOnPlayerChangeTeam); return;
          default: break;
        }
      }
      public EventOnGoalScored OnGoalScored(Team ScoredTeam, ScoreState ScoreSate) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGoalScored>(EventOnGoalScored.ID);
        ev.ScoredTeam = ScoredTeam;
        ev.ScoreSate = ScoreSate;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerJoined OnPlayerJoined(PlayerRef JoinedPlayer) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerJoined>(EventOnPlayerJoined.ID);
        ev.JoinedPlayer = JoinedPlayer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerLeft OnPlayerLeft(PlayerRef LeftPlayer) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerLeft>(EventOnPlayerLeft.ID);
        ev.LeftPlayer = LeftPlayer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerChangeTeam OnPlayerChangeTeam(PlayerRef PlayerRef, Team Team) {
        var ev = _f.Context.AcquireEvent<EventOnPlayerChangeTeam>(EventOnPlayerChangeTeam.ID);
        ev.PlayerRef = PlayerRef;
        ev.Team = Team;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventOnGoalScored : EventBase {
    public new const Int32 ID = 1;
    public Team ScoredTeam;
    public ScoreState ScoreSate;
    protected EventOnGoalScored(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGoalScored() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + ScoredTeam.GetHashCode();
        hash = hash * 31 + ScoreSate.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerJoined : EventBase {
    public new const Int32 ID = 2;
    public PlayerRef JoinedPlayer;
    protected EventOnPlayerJoined(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerJoined() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + JoinedPlayer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerLeft : EventBase {
    public new const Int32 ID = 3;
    public PlayerRef LeftPlayer;
    protected EventOnPlayerLeft(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerLeft() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + LeftPlayer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerChangeTeam : EventBase {
    public new const Int32 ID = 4;
    public PlayerRef PlayerRef;
    public Team Team;
    protected EventOnPlayerChangeTeam(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerChangeTeam() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
